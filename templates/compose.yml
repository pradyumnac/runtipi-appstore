version: "3.9" # HOMESTACK
services:
  2fauth:
    image: 2fauth/2fauth:5.4.2
    container_name: 2fauth
    volumes:
      - ${APP_DATA_DIR}/2fauth/data:/2fauth
    ports:
      - ${APP_2FAUTH_PORT}:8000
    environment:
      - ASSET_URL=https://${APP_2FAUTH_DOMAIN}
      - APP_URL=https://${APP_2FAUTH_DOMAIN}
    networks:
      - tipi_main_network
  
  archivebox:
    image: archivebox/archivebox:0.7.4
    restart: unless-stopped
    container_name: archivebox
    command: server --quick-init 0.0.0.0:8015
    environment:
      - PORT=8015
      - PUBLIC_INDEX=${ARCHIVEBOX_PUBLIC_INDEX-true} # set to False to prevent anonymous users from viewing snapshot list
      - PUBLIC_SNAPSHOTS=${ARCHIVEBOX_PUBLIC_SNAPSHOTS-true} # set to False to prevent anonymous users from viewing snapshot content
      - PUBLIC_ADD_VIEW=${ARCHIVEBOX_PUBLIC_ADD_VIEW-false} # set to True to allow anonymous users to submit new URLs to archive
      - ADMIN_USERNAME=${ARCHIVEBOX_USERNAME} # create an admin user on first run with the given user/pass combo
      - ADMIN_PASSWORD=${ARCHIVEBOX_PASSWORD}
      - PUID=1000 # set to your host user's UID & GID if you encounter permissions issues
      - PGID=1000
      # - SEARCH_BACKEND_ENGINE=${ARCHIVEBOX_SEARCH_BACKEND_ENGINE} # uncomment these and sonic container below for better full-text search
      # - SEARCH_BACKEND_HOST_NAME=${ARCHIVEBOX_SEARCH_BACKEND_HOST_NAME}
      # - SEARCH_BACKEND_PASSWORD=${ARCHIVEBOX_SEARCH_BACKEND_PASSWORD}
      - MEDIA_MAX_SIZE=${ARCHIVEBOX_MEDIA_MAX_SIZE-750m} # increase this filesize limit to allow archiving larger audio/video files
      - TIMEOUT=${ARCHIVEBOX_TIMEOUT-60} # increase this number to 120+ seconds if you see many slow downloads timing out
      - CHECK_SSL_VALIDITY=${ARCHIVEBOX_CHECK_SSL_VALIDITY-true} # set to False to disable strict SSL checking (allows saving URLs w/ broken certs)
      - SAVE_ARCHIVE_DOT_ORG=${ARCHIVEBOX_SAVE_ARCHIVE_DOT_ORGE-true} # set to False to disable submitting all URLs to Archive.org when archiving
    networks:
      - tipi_main_network
    ports:
      - "${APP_ARCHIVEBOX_PORT}:8015"
    volumes:
      - "${APP_DATA_DIR}/archivebox/data:/data"

  authentik:
    image: ghcr.io/goauthentik/server:2024.10.4
    restart: unless-stopped
    command: server
    container_name: authentik
    environment:
      AUTHENTIK_REDIS__HOST: redishost
      AUTHENTIK_POSTGRESQL__HOST: pghost
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_AUTHENTIK_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_AUTHENTIK_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ${APP_DATA_DIR}/data/authentik-media:/media
      - ${APP_DATA_DIR}/data/authentik-custom-templates:/templates
    ports:
      - "${APP_AUTHENTIK_PORT}:9443"
    depends_on:
      - authentik-db
      - authentik-redis
    networks:
      - tipi_main_network
    
  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.10.4
    restart: unless-stopped
    command: worker
    container_name: authentik-worker
    environment:
      AUTHENTIK_REDIS__HOST: redishost
      AUTHENTIK_POSTGRESQL__HOST: pghost
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_AUTHENTIK_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_AUTHENTIK_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APP_DATA_DIR}/authtentik/data/authentik-media:/media
      - ${APP_DATA_DIR}/authtentik/data/authentik-certs:/certs
      - ${APP_DATA_DIR}/authtentik/data/authentik-custom-templates:/templates
    depends_on:
      - authentik-db
      - authentik-redis
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
  pghost:
    container_name: pg
    image: postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_AUTHENTIK_DB} -U $${POSTGRES_AUTHENTIK_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${APP_DATA_DIR}/data/postgres:/var/lib/postgresql/data
      - ./pg.init.d:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_MULTIPLE_DATABASES: "${POSTGRES_DBS}"
      POSTGRES_PASSWORD: ${AUTHENTIK_DB_PASSWORD}
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
  redishost:
    image: redis:alpine
    command: --save 60 1 --loglevel warning
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${APP_DATA_DIR}/data/redis:/data
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true

  autobrr:
    container_name: autobrr
    image: ghcr.io/autobrr/autobrr:v1.51.1
    restart: unless-stopped
    ports:
      - ${APP_AUTOBRR_PORT}:7474
    volumes:
      - ${APP_DATA_DIR}/data/autobrr:/config
    user: "1000:1000"
    environment:
      - TZ=${TZ}
    networks:
      - tipi_main_network

networks:
  tipi_main_network:
    name: runtipi_tipi_main_network
    external: true